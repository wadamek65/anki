interface Node {
    id: ID!
}

type PageInfo {
    startCursor: String
    endCursor: String
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
}

type Language implements Node {
    id: ID!
    name: String!
    color: String!
}

type Languages {
    original: Language!
    learning: Language!
}

type Card implements Node {
    id: ID!
    language: Languages!
    word: String!
    translations: [String!]!
    note: String!
}

type CardEdge {
    cursor: String!
    node: Card!
}

type CardConnection {
    pageInfo: PageInfo!
    edges: [CardEdge!]!
}

type Deck implements Node {
    id: ID!
    title: String!
    createdAt: Float!
    cards(after: String, before: String, first: Int, last: Int): CardConnection!
    cardsAmount: Int!
}

type DeckEdge {
    cursor: String!
    node: Deck!
}

type DeckConnection {
    pageInfo: PageInfo!
    edges: [DeckEdge!]!
}

type AppSettings {
    languages: [Language!]!
}

type User {
    name: String!
    email: String!
    avatar: String!
    appSettings: AppSettings!
}

input CreateDeckInput {
    title: String = ""
}

type CreateDeckPayload {
    deck: Deck!
}

input ChangeLanguageInput {
    original: ID!
    learning: ID!
}

input CreateCardLanguageInput {
    original: ID
    learning: ID
}

input CreateCardInput {
    deckId: ID!
    word: String = ""
    translations: [String!] = []
    language: CreateCardLanguageInput
    note: String = ""
}

type CreateCardPayload {
    cardEdge: CardEdge!
}

input UpdateCardInput {
    cardId: ID!
    language: ChangeLanguageInput!
    word: String!
    translations: [String!]!
    note: String!
}

type UpdateCardPayload {
    card: Card!
}

enum StudyDirection {
    STANDARD
    REVERSED
    BOTH
}

type Question {
    cardId: ID!
    word: String!
    translations: [String!]!
    from: Language!
    to: Language!
    note: String!
    correctAnswers: Int!
    wrongAnswers: Int!
    answersLeft: Int!
}

type StudySession implements Node {
    id: ID!
    startedAt: Float!
    derivedDeckId: ID!
    penalty: Int!
    questions: [Question!]!
}

input StartStudySessionInput {
    deckId: ID!
    direction: StudyDirection!
    repeatNumber: Int!
    penalty: Int!
}

type StartStudySessionPayload {
    session: StudySession!
}

input AddLanguageInput {
    name: String!
    color: String!
}

type LanguagePayload {
    language: Language!
}

input UpdateLanguageInput {
    id: ID!
    name: String!
    color: String!
}

input RemoveLanguageInput {
    languageId: ID!
}

type RemoveLanguagePayload {
    languageId: ID!
}

type Query {
    user: User!
    decks(after: String, before: String, first: Int, last: Int): DeckConnection!
    deck(id: ID!): Deck!
    card(id: ID!): Card!
    studySession(id: ID!): StudySession!
    node(id: ID): Node
}

type Mutation {
    createDeck(input: CreateDeckInput): CreateDeckPayload!
    createCard(input: CreateCardInput!): CreateCardPayload!
    updateCard(input: UpdateCardInput!): UpdateCardPayload!
    startStudySession(input: StartStudySessionInput!): StartStudySessionPayload!
    addLanguage(input: AddLanguageInput!): LanguagePayload!
    updateLanguage(input: UpdateLanguageInput!): LanguagePayload!
    removeLanguage(input: RemoveLanguageInput!): RemoveLanguagePayload!
}

schema {
    query: Query
    mutation: Mutation
}
