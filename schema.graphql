interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Language {
    original: String
    learning: String
}

type Card implements Node {
    id: ID!
    language: Language
    word: String
    translations: [String]!
    note: String
}

type CardEdge {
    cursor: String!
    node: Card
}

type CardConnection {
    edges: [CardEdge]
    pageInfo: PageInfo!
}

type Deck implements Node {
    id: ID!
    title: String
    cards(first: Int, last: Int, after: String, before: String): CardConnection
}

type DeckEdge {
    cursor: String!
    node: Deck
}

type DeckConnection {
    edges: [DeckEdge]
    pageInfo: PageInfo!
}

type User {
    name: String!
    email: String!
    avatar: String
    decks(first: Int, last: Int, after: String, before: String): DeckConnection
}

type Query {
    node(id: ID!): Node
    user: User!
}

schema {
    query: Query
}
