interface Node {
    id: ID!
}

type Language {
    original: String
    learning: String
}

type Card implements Node{
    id: ID!
    language: Language
    word: String
    translations: [String]!
    note: String

}

type Deck implements Node {
    id: ID!
    title: String
}

type User {
    name: String!
    email: String!
    avatar: String
}

input CreateDeckInput {
    title: String
}

type CreateDeckPayload implements Node {
    id: ID!
    title: String
}

type Query {
    user: User!
    decks: [Deck!]!
    node(id: ID!): Node
}

type Mutation {
    createDeck(input: CreateDeckInput!): CreateDeckPayload
}

schema {
    query: Query
    mutation: Mutation
}
