interface Node {
    id: ID!
}

interface CardInterface {
    language: Language
    word: String
    translations: [String]!
    note: String
}

interface UserInterface {
    name: String!
    decks: [Deck]!
}

type Language {
    original: String
    learning: String
}

type Card implements Node & CardInterface{
    id: ID!
    language: Language
    word: String
    translations: [String]!
    note: String
}

type Deck {
    title: String
    cards: [Card]!
}

type User implements Node & UserInterface {
    id: ID!
    name: String!
    decks: [Deck]!
}

input LanguageInput {
    original: String
    learning: String
}

input CreateCardInput {
    language: LanguageInput
    word: String
    translations: [String]
    note: String
}

type CreateCardPayload implements Node & CardInterface {
    id: ID!
    language: Language
    note: String
    translations: [String]!
    word: String
}

input CreateUserInput {
    name: String!
}

type CreateUserPayload implements Node & UserInterface {
    id: ID!
    name: String!
    decks: [Deck]!
}

type Query {
    getUser(id: ID!): User
    getCard(id: ID!): Card
    getCards(ids: [ID]!): [Card]!
    node(id: ID!): Node
}

type Mutation {
    createUser(input: CreateUserInput): CreateUserPayload
    createCard(input: CreateCardInput!): CreateCardPayload
}

schema {
    query: Query
    mutation: Mutation
}
